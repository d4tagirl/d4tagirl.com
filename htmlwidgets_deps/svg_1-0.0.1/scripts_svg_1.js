function init_prop_svg_1(){document.querySelectorAll('#svg_1')[0].getElementById('15').setAttribute('title','hadleywickham: @joranelias @bhive01 Thatâ€™s how rowwise() works but it somehow ends up being too magical and is confusing in a different way<br>Likes: 2');document.querySelectorAll('#svg_1')[0].getElementById('16').setAttribute('title','bhive01: @hadleywickham @joranelias Seems to not do anything from what I can tell: <br>mtcars %&gt;%<br>nest(-cyl) %&gt;%<br>mutate(lm_column = map(data, ~lm(mpg ~ wt, data = .x),<br>            mod_aug = augment(lm_column))<br>            )<br>Likes: 0');document.querySelectorAll('#svg_1')[0].getElementById('17').setAttribute('title','hadleywickham: @joranelias @bhive01 That would work is augment() took a list of models and return a list of data frames. But it would no longer be type stable. Most vectorisation is not over lists<br>Likes: 2');document.querySelectorAll('#svg_1')[0].getElementById('18').setAttribute('title','joranelias: @bhive01 Like, if I have a column of lm objects, I feel like it`s a really weird departure from dplyr semantics to have to purrr::map to broom::augment each one. Why can`t I just say mutate(mod_aug = augment(lm_column))?<br>Likes: 1');document.querySelectorAll('#svg_1')[0].getElementById('19').setAttribute('title','joranelias: @bhive01 That`s definitely a big part of my mental block. To me, if I have a list column and I use mutate() to create a new column, I shouldn`t have to purrr::map anything. It should just be clear that that`s what I want to happen under the hood.<br>Likes: 1');document.querySelectorAll('#svg_1')[0].getElementById('20').setAttribute('title','bhive01: @joranelias Worth looping in Hadley et al and asking or creating an issue?<br>Likes: 0');document.querySelectorAll('#svg_1')[0].getElementById('21').setAttribute('title','joranelias: @bhive01 I mean, I`m sure there are technical reasons why this is nigh on impossible, but it knows I`m mutate-ing, it knows it`s a list column, why can`t it convert augment(lm_column) into the equivalent purrr::map call?<br>Likes: 1');document.querySelectorAll('#svg_1')[0].getElementById('22').setAttribute('title','bhive01: @joranelias I`ve gotten better at it since digging deeper and getting better at purrr::map(). The one thing that I still struggle with is using nesting to create models and then using those in a ggplot() overlaying the original data. Keep using it. Takes time for sure.<br>Likes: 0');document.querySelectorAll('#svg_1')[0].getElementById('23').setAttribute('title','joranelias: List columns in the #tidyverse is like data.table syntax for me. No matter how many times I use it I feel like I`m figuring out the syntax for the first time. It just doesn`t stick in my brain. #rstats<br>Likes: 2');document.querySelectorAll('#svg_1')[0].getElementById('24').setAttribute('title','joranelias: @hadleywickham @bhive01 Well, that would explain why I can never figure out how to achieve something similar with rowwise! ðŸ˜‚<br>Likes: 2');document.querySelectorAll('#svg_1')[0].getElementById('25').setAttribute('title','bhive01: @hadleywickham @joranelias rowwise() requires a do() I guess (from the docs and errors I got). Does give an answer, but removes the nested table. ðŸ˜•<br>mtcars %&gt;%<br>    nest(-cyl) %&gt;%<br>    mutate(lm_column = map(data, ~lm(mpg ~ wt, data = .x))) %&gt;%<br>    rowwise() %&gt;%<br>    do(broom::augment(.$lm_column)) https://t.co/DqaCGLBOr7<br>Likes: 0');document.querySelectorAll('#svg_1')[0].getElementById('26').setAttribute('title','joranelias: @bhive01 Yeah, would be curious if @hadleywickham @JennyBryan @_lionelhenry had thoughts on why implementing this sort of semantics would be difficult. https://t.co/GclgmcBJ3Z<br>Likes: 2');document.querySelectorAll('#svg_1')[0].getElementById('27').setAttribute('title','bhive01: @joranelias I was trying to come up with an example where it was clear and this is a perfect example. I absolutely agree. Why can`t it do this? Input is a list, return a list into a new column.<br>Likes: 1');document.querySelectorAll('#svg_1')[0].getElementById('28').setAttribute('title','Thoughtfulnz: @joranelias I think of it as going from 2D to 3D, which is not technically correct, but a as geometric metaphor I find having a geometric metaphor gives me something to relate the code to.<br>Likes: 0');};var array_selected_svg_1 = [];var zoom_svg_1 = d3.zoom().scaleExtent([1.00, 4.00]);var lasso_svg_1 = d3.lasso();